1 - Preparar git, venv e django:

-Criar ambiente virtual e instalar django;
-python -m venv venv;
-pip install django;
-Configurar o gitignore e o git;
-Criar o projeto com o comando no terminal: django-admin startproject project .

2 - Criar app:
- python manage.py startapp NOME_DO_APP;
- Verificar se o app está na lista de apps instalados no arquivo settings da pasta geral do projeto. Caso não esteja, colocar no NOME_DO_APP na lista de INSTALLED_APPS;

3 - Configurar templates e statics:
-Criar duas pastas na pasta raiz. Uma para os arquivos static e o outro para os templates
-Dentro da pasta templates criar uma pasta que servirá como name space com o nome “global” e dentro dessa pasta uma arquivo chamado de base.html;

-Dentro da pasta static, criar uma pasta que servirá como name space com o nome “global” e dentro dessa pasta criar uma outra pasta chamada css, e dentro dessa pasta css criar um arquivo chamado de style.css. Aqui ficam os css;

-Configurar no arquivo settings do geral, onde estão as pastas para templates e static;
-Dentro do arquivo settings, vai em templates. Dentro de templates vai em DIRS  e colocar [BASE_DIR / “base_templates”]. Isso irá configurar o caminho para a os templates;

-Criar uma linha de códigos após STATIC_URL, com o nome STATICFILES_DIRS =[ BASE_DIR/ “base_static”]. Isso irá configurar a pasta static;

-Criar uma pasta templates dentro da pasta do app que foi criado. Dentro dessa pasta, criar uma pasta com o mesmo nome do app. Depois criar uma pasta chamada de partials e dentro dessa pasta um arquivo chamado de index.html. Essa será a home do app;

-Utilizar o comando de django {% extends “global/base;html%}  para chamar o arquivo base.html da pasta templates que está na pasta raiz;

4 - Configurações adicionais:
-Criar uma pasta dentro da pasta do app. Dentro dessa pasta, criar uma arquivo com o nome __init__.py. Dentro desse arquivo importar as views que serão usadas.

-Criar um arquivo que será a view. Dentro dessa view que dá para a página inicial, fazer o import do render com o código from django import render  criar uma função com o seguinte código: def index(request): return render (request, “NOME_DO_APP/index.html”). Isso irá criar uma view baseada no arquivo index.html que está dentro do template do app;

-Criar um arquivo chamado de urls.py dentro da pasta do app;

-Dentro do urls.py importar path com o comando from django.urls import path , depois importar a view do app com o comando from NOME_DO_APP import views e por fim criar um name space dentro do código do arquivo urls.py com o código app_name = “NOME_DO_APP”.

-Criar um caminho para o index.html utilizando o código: urlpatterns = [path(“ ”,views.index, name = “index”)] ;

-Dentro do arquivo urls.py principal, que fica dentro da pasta project, importar mais um item de django.urls que se chama include;

-Criar um caminho para que a página raiz vá direto para o urls.py dentro da pasta do app com o código: path(“ ”, include(“contact.urls”)),  

-Dentro do arquivo base.html que fica dentro dos templates, criar uma linha de código na primeira linha com o seguinte código : {% load static %} para carregar os statics. Depois, dentro do head, criar link para o arquivo static css com o código: <link rel = “stylesheet” href=”{% static “global/css/style.css” %}”>

-startar o servidor com o comando python manage.py runserver



5 - Criando Super user e configurações de admin:

-Como ainda não existem migrations pra fazer, digite o comando python manage.py migrate para migrar os migrations para o banco de dados;

-Digite o comando python manage.py createsuperuser para criar o admin. Crie uma senha forte.

6 - Criando Register e login de usuário

-Dentro da pasta do app, crie uma pasta chamada models e dentro dessa pasta ficarão os arquivos models que você irá utilizar. Crie um arquivo chamado __init__.py e outro chamado de model_login.py e dentro desse arquivo faça o import models que estão dentro dessa mesma pasta com o código from .model_login import *. Dentro do arquivo model_login.py  faça o import dos models do django com o código from django.db import models. 

-Dentro da pasta do APP crie um arquivo chamado forms.py . Dentro desse arquivo faça os seguintes imports:
from django import forms
from django.core.exceptions import ValidationError
from . import models
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from django.contrib.auth import password_validation

-Depois crie as classes RegisterForm e a RegisterUpdateForm com o seguinte código:


class RegisterForm(UserCreationForm):
    first_name = forms.CharField(
        required=True,
        min_length=3,
    )
    last_name = forms.CharField(
        required=True,
        min_length=3,
    )
    email = forms.EmailField()

    class Meta:
        model = User
        fields = (
            "first_name",
            "last_name",
            "email",
            "username",
            "password1",
            "password2",
        )

    def clean_email(self):

        email = self.cleaned_data.get("email")

        if User.objects.filter(email=email).exists():
            self.add_error(
                "email",
                ValidationError(
                    "Já existe usuário associado a este email", code="invalid"
                ),
            )
        return email


class RegisterUpdateForm(forms.ModelForm):

    first_name = forms.CharField(
        min_length=2,
        max_length=30,
        required=True,
        help_text="Required.",
        error_messages={"min_length": "Please, add more than 2 letters."},
    )
    last_name = forms.CharField(
        min_length=2,
        max_length=30,
        required=True,
        help_text="Required.",
        error_messages={"min_length": "Please, add more than 2 letters."},
    )
    password1 = forms.CharField(
        label="Password",
        strip=False,
        widget=forms.PasswordInput(attrs={"autocomplete": "new-password"}),
        help_text=password_validation.password_validators_help_text_html(),
        required=False,
    )
    password2 = forms.CharField(
        label="Password",
        strip=False,
        widget=forms.PasswordInput(attrs={"autocomplete": "new-password"}),
        help_text=password_validation.password_validators_help_text_html(),
        required=False,
    )

    class Meta:
        model = User
        fields = (
            "first_name",
            "last_name",
            "email",
            "username",
        )

    def save(self, commit=True):
        cleaned_data = self.cleaned_data
        user = super().save(commit=False)

        password = cleaned_data.get("password1")

        if password:
            user.set_password(password)

        if commit:
            user.save()
        return user

    def clean(self):
        password1 = self.cleaned_data.get("password1")
        password2 = self.cleaned_data.get("password2")

        if password1 or password2:

            if password1 != password2:
                self.add_error("password2", ValidationError("Senhas não batem"))

        return super().clean()

    def clean_email(self):

        email = self.cleaned_data.get("email")
        current_email = self.instance.email

        if current_email != email:

            if User.objects.filter(email=email).exists():
                self.add_error(
                    "email",
                    ValidationError(
                        "Já existe usuário associado a este email", code="invalid"
                    ),
                )

        return email

    def clean_password1(self):
        password1 = self.cleaned_data.get("password1")

        if password1:
            try:
                password_validation.validate_password(password1)
            except ValidationError as erros:
                self.add_error("password1", ValidationError(erros))

        return password1




-Crie uma nova view dentro da pasta Views com o nome de user_forms.py . 

-Dentro desse arquivo importe o render com o código from django.shortcuts import render . 

-Faça também o import da classe RegisterForm que foi criada em forms que fica dentro do app com o seguinte código from NOME_DO_APP.forms import RegisterForm

Def register(request):
	Form = RegisterForm()

	If request.method == “POST”:
	render(request, “NOME_DO_APP/register.html”, {“form”: form})

-Faça o import da view user_forms.py dentro do __init__.py que fica dentro da pasta views com o código from .user_forms import *

-Dentro da pasta templates/NOME_DO_APP que fica dentro do app, crie um arquivo com o nome register.html que será o html do form para fazer o register.

-urls.py que fica dentro da pasta do app, crie a url para a view register com o seguinte código path(“user/create/”, views.register, name=”register”), 





	

